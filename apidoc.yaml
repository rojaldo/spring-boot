openapi: '3.0.2'
info:
  title: Spring Boot API
  version: '1.1'
  description: API Description for a course on Spring Boot with OpenAPI 3
  contact:
    name: API Support
    email: myemail@email.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: https://localhost:8080/api/v1
    description: Localhost server
  - url: https://api.example.com/api/v1
    description: Production server
  - url: https://api.staging.example.com/api/v1
    description: Staging server
tags:
  - name: books
    description: Books from library
  - name: users
    description: Users from library
  - name: trivial
    description: Trivial game API
paths:
  /library/users:
    get:
      summary: Get users from library
      description: Get users from library with optional filters by name, age greater than and age (age_gt) and age less than (age_lt)
      operationId: getUsers
      tags:
        - "users"
      parameters: 
        - name: name
          in: query
          description: Search a user by name
          required: false
          schema:
            type: string
            example: John 
        - name: age_gt
          in: query
          description: Search users with age greater than
          required: false
          schema:
            type: integer
            format: int32
            example: 30
        - name: age_lt
          in: query
          description: Search users with age less than
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '400':
          description: There is a problem with your request, probably a wrong parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
    post:
      summary: Create user
      description: Create user with name, email and age
      operationId: createUser
      tags:
        - "users"
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
  /library/users/{id}:
    put:
      summary: Update user
      description: Update user with name, email and age
      operationId: updateUser
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Something went wrong with your body request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Could not find user with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    patch:
      summary: Update user partially
      description: Update user partially with name, email and age
      operationId: updateUserPartially
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Something went wrong with your body request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Could not find user with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      description: Delete user by id
      operationId: deleteUser
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Could not find user with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /library/books:
    get:
      summary: Get books
      description: Get books with optional filters by name and author
      operationId: getBooks
      tags:
        - "books"
      parameters: 
        - name: name
          in: query
          description: Book name
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Book author
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Error400'
    post:
      summary: Create book
      description: Create book with name, author, ISBN and description
      operationId: createBook
      tags:
        - "books"
      requestBody:
        description: Book object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '201':
          description: Created book successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
  /library/books/{id}:
    put:
      description: Update book
      operationId: updateBook
      tags:
        - "books"
      parameters:
        - name: id
          in: path
          description: Book id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Book object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      description: Delete book
      operationId: deleteBook
      tags:
        - "books"
      parameters:
        - name: id
          in: path
          description: Book id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /trivial/cards:
    get:
      summary: Get cards
      description: Get cards from trivial game
      operationId: getCards
      tags:
        - "trivial"
      parameters:
        - name: amount
          in: query
          description: Amount of cards to get
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrivialCard'
        '400':
          description: probably a wrong parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
    post:
      summary: Create card
      description: Create card for trivial game
      operationId: createCard
      tags:
        - "trivial"
      requestBody:
        description: Card object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrivialCardRequest'
      responses:
        '201':
          description: Created card successfully
          content:
            application/json:
              schema:
                type: string
                example: "Ace of Hearts"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
# objects
components:
  schemas:
    BeerResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: Punk IPA 2007
        tagline:
          type: string
          example: Post Modern Classic. Spiky. Tropical. Hoppy.
        first_brewed:
          type: string
          example: 04/2007
        description:
          type: string
          example: Our flagship beer that kick started the craft beer revolution. This is James and Martin's original take on an American IPA, subverted with punchy New Zealand hops. Intense pine and kiwi fruit coupled with a big hop hit.
        image_url:
          type: string
          example: https://images.punkapi.com/v2/192.png
        abv:
          type: number
          example: 6.0
        ibu:
          type: number
          example: 60.0
        ebc:
          type: number
          example: 20.0
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
        age:
          type: integer
          format: int32
          example: 30
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
        age:
          type: integer
          format: int32
          example: 30
    BookRequest:
      type: object
      properties:
        name:
          type: string
          example: The Hobbit
        author:
          type: string
          example: J.R.R. Tolkien
        isbn:
          type: string
          example: 978-3-16-148410-0
        description:
          type: string
          example: The Hobbit is a tale of high adventure, undertaken by a company of dwarves in search of dragon-guarded gold.
    BookResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        author:
          type: string
        isbn:
          type: string
        description:
          type: string
    TrivialCard:
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 123
        question:
          type: string
          example: What is the capital of France?
        right_answer: 
          type: string
          example: Paris
        wrong_answers:
          type: array
          items:
            type: string
          example: 
            - London
            - Madrid
            - Berlin
        category:
          type: string
          example: Geography
        type:
          type: string
          example: multiple
        difficulty:
          type: string
          example: easy
    TrivialCardRequest:
      type: object
      properties:
        question:
          type: string
          example: What is the capital of France?
        right_answer: 
          type: string
          example: Paris
        wrong_answers:
          type: array
          items:
            type: string
          example: 
            - London
            - Madrid
            - Berlin
        category:
          type: string
          example: Geography
        type:
          type: string
          example: multiple
        difficulty:
          type: string
          example: easy
    Error400:
      type: object
      properties:
        message:
          type: string
          example: wrong parameter
        code:
          type: integer
          format: int32
          example: 400
    Error404:
      type: object
      properties:
        message:
          type: string
          example: Not Found
        code:
          type: integer
          format: int32
          example: 404
        
    

